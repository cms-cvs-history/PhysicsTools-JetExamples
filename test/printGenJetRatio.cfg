process testJET = {

  include "FWCore/MessageService/data/MessageLogger.cfi"
  replace MessageLogger.cerr.default.limit = 10

  untracked PSet maxEvents = {untracked int32 input = 50}

  service = RandomNumberGeneratorService
  {
    untracked uint32 sourceSeed = 123456789
    PSet moduleSeeds =
    {
      untracked uint32 VtxSmeared = 98765432
    }
  }

# This is generate the event on the fly
  source = PythiaSource
  {
    untracked int32 pythiaPylistVerbosity = 0
    untracked bool pythiaHepMCVerbosity   = false
    untracked int32 maxEventsToPrint      = 0
    untracked double filterEfficiency     = 1.

    PSet PythiaParameters =
    {
      # This is a vector of ParameterSet names to be read, in this order
      vstring parameterSets =
      {
        "pythiaUESettings",
        "processParameters"
      }

      include "Configuration/Generator/data/PythiaUESettings.cfi"

      vstring processParameters =
      {
        'MSEL=5               ! high pT process -> bb',
        'CKIN(3)=170.         ! minimum pt hat for hard interactions',
        'CKIN(4)=230.         ! maximum pt hat for hard interactions'
      }
    }
  }

include "Configuration/StandardSequences/data/VtxSmearedGauss.cff"
include "RecoJets/Configuration/data/RecoGenJets.cff"
include "SimGeneral/HepPDTESSource/data/pythiapdt.cfi"

# This is to printout the full event
  module printTree = ParticleListDrawer {
    untracked int32 maxEventsToPrint = 1
  }

# select the jet inputs 
  module jetInput = GenParticleCandidateSelector {
   string src = "genParticleCandidates"
   bool stableOnly = true
   bool partons    = false
   untracked bool verbose = false
   vstring excludeList = {}
   vstring includeList = {}
  }

# produce the GenJets on the fly
  module aJet = IterativeConeJetProducer {
    untracked string alias = "IC5GenJet"
    untracked int32 debugLevel = 0
    double seedThreshold = 1.0
    double inputEtMin = 0.
    double inputEMin = 0.
    InputTag src = jetInput
    untracked string jetType = "GenJet"
    untracked bool verbose = false
    double coneRadius = 0.5
  }

# compute bRatio and cRatio for GenJets
  module BCRatio = GenJetBCEnergyRatio{
     InputTag genJets = aJet
  }

# the anlyzer to print Jet Flavour info
  module printEvent = printGenJetRatio {
    InputTag srcBratio  = BCRatio:bRatioCollection
    InputTag srcCratio  = BCRatio:cRatioCollection 
}

  module printEventNumber = AsciiOutputModule { }
  path p = {
             VtxSmeared,
             genJetParticles,
             recoGenJets,
             printTree,
             jetInput,
             aJet, 
             BCRatio, 
             printEvent 
           }

# Now order modules for execution
  endpath outpath = {printEventNumber}

}

